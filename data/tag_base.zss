#Basic tag code that can be used as base for more advanced tag implementations
#To test it change "tag.zss" reference in config.json "CommonStates" array to this file
#===============================================================================
#Functions
#===============================================================================
#Returns tagged in char ID
[Function fTagPartnerRange(partnerID) ret]
if $partnerID > GetPlayerID(TeamSide) + NumPartner {
	let partnerID = GetPlayerID(TeamSide);
} else if $partnerID < GetPlayerID(TeamSide) {
	let partnerID = GetPlayerID(TeamSide) + NumPartner;
}
let ret = $partnerID;

[Function fTagGetPartnerID(add) ret]
let partnerID = call fTagPartnerRange(ID + $add);
if playerID($partnerID),Alive = 0 {
	let partnerCnt = 1;
	if $partnerCnt = Min(NumPartner, 3) {
		let partnerID = 0;
	} else {
		let partnerID = call fTagPartnerRange($partnerID + $add);
		if playerID($partnerID),Alive = 0 {
			let partnerCnt = $partnerCnt + 1;
			if $partnerCnt = Min(NumPartner, 3) {
				let partnerID = 0;
			} else {
				let partnerID = call fTagPartnerRange($partnerID + $add);
				if playerID($partnerID),Alive = 0 {
					let partnerID = 0;
				}
			}
		}
	}
}
let ret = $partnerID;

#Decides if AI switch should happen, returns tagged in char ID (the function can be overridden locally)
#TODO: Balance default AI switch scaling (prioritize partner with more life, less red life, increase chance at the hyper start, decrease when pressured in corner etc.)
[Function fTagAISwitch(nextPartnerID, previousPartnerID) ret]
let ret = 0;
if Command = "TagShiftFwd" {
	let ret = $nextPartnerID;
} else if Command = "TagShiftBack" {
	let ret = $previousPartnerID;
}

#TagIn Switch Explod
[Function fTagSwitchExplod()]
let anim = Const(FxTagSwitchAI);
if AILevel = 0 {
	let anim = $anim + TeamSide;
}
Explod{
	anim: F $anim;
	postype: p1;
	pos: 0, floor((Const(size.head.pos.y) - Const(size.ground.front) / 2 - Const(size.ground.back) / 2));
	sprpriority: 5;
	ownpal: 1;
	facing: Facing;
	scale: Const240p(0.5), Const240p(0.5);
	bindtime: -1;
	supermovetime: -1;
	pausemovetime: -1;
	removeongethit: 1;
	ignorehitpause: 1;
}

#===============================================================================
#StateTagEnteringScreen
#===============================================================================
[Statedef 5600; type: S; movetype: H; physics: N;
 anim: Const(AnimTagEnteringScreen); sprpriority: 2; ctrl: 0;]

ScreenBound{value: 0; movecamera: 1, 1}
AssertSpecial{flag: noturntarget}

if Time = 0 {
	if Facing != playerID(GetPlayerID(TeamLeader)),Facing {
		Turn{}
	}
	# set starting pos (redirected to gather consistent local coordinate space values ready for Const240p conversion)
	TeamMapSet{map: "_iksys_tagPosX"; value: Pos X * LocalScale - (BackEdgeBodyDist * LocalScale + 90) * Facing; redirectid: playerID(GetPlayerID(TeamLeader)),ID}
	PosSet{x: Const240p(Map(_iksys_tagPosX)); y: 0}
	# store distance to switch initiation position
	MapSet{map: "_iksys_tagSwitchDist"; value: abs(Pos X - playerID(GetPlayerID(TeamLeader)),Pos X)}
	# set movement
	VelSet{x: min(Const240p(Const(TagInVelX)), Map(_iksys_tagSwitchDist) / Const(TagInTime)); y: 0}
	# change active player assignment
	MapSet{map: "_iksys_tagLastID"; value: playerID(GetPlayerID(TeamLeader)),ID}
	TagIn{leader: PlayerNo}
	call fTagSwitchExplod();
} else {
	MapAdd{map: "_iksys_tagSwitchDist"; value: -Vel X}
}

# regain control right after entering screen (unused in this state by default)
if !Ctrl && BackEdgeBodyDist >= 0 && Map(_iksys_tagRegainCtrl) = 1 {
	StateTypeSet{movetype: I} # disables countermeasure against global states triggering when character is off-screen
	CtrlSet{value: 1}
	MapSet{map: "_iksys_tagRegainCtrl"; value: 0}
}

# continue until reaching place where the switch was initiated, but stop in front of enemy
if BackEdgeBodyDist >= 0 && (floor(Map(_iksys_tagSwitchDist)) <= 0 || P2BodyDist X < Const240p(30)) {
	VelSet{x: 0; y: 0}
	ChangeState{value: Const(StateStand); ctrl: 1}
}

#===============================================================================
#StateTagLeavingScreen
#===============================================================================
[Statedef 5610; type: S; movetype: I; physics: N;
 anim: Const(AnimTagLeavingScreen); sprpriority: -2; velset: 0, 0; ctrl: 0; facep2: 1;]

persistent(0) {
	Turn{}
}

VelSet{x: min(Const(velocity.run.fwd.x), Const240p(Const(TagInVelX))); y: 0}

if BackEdgeDist < -Const240p(160) || FrontEdgeDist < -Const240p(160) || Map(_iksys_tagLeavingPosX) = Pos X {
	ChangeState{value: Const(StateTagWaitingOutside)}
}
MapSet{map: "_iksys_tagLeavingPosX"; value: Pos X} #TODO: won't be needed once this bug is fixed: https://github.com/Windblade-GR01/Ikemen-GO/issues/171

#===============================================================================
#StateTagWaitingOutside
#===============================================================================
[Statedef 5611; type: A; movetype: I; physics: N;
 anim: Const(AnimStanding); velset: 0, 0; ctrl: 0;]

AssertSpecial{flag: invisible; flag2: noautoturn}
ScreenBound{value: 0; movecamera: 0, 0}

# force Standby character to always stay outside visible area
PosSet{
	x: (playerID(GetPlayerID(TeamLeader)),Pos X - playerID(GetPlayerID(TeamLeader)),ScreenPos X - Const240p(160)) * -Facing;
	y: playerID(GetPlayerID(TeamLeader)),Pos Y - playerID(GetPlayerID(TeamLeader)),ScreenPos Y - Const240p(160);
}

#===============================================================================
#StateTagJumpingIn
#===============================================================================
[Statedef 5620; type: A; movetype: I; physics: N;
 anim: Const(AnimTagJumpingIn); sprpriority: 2; ctrl: 0;]

if RoundState = 3 {
	ScreenBound{value: 0; movecamera: 0, 0}
	PlayerPush{value: 0}
} else {
	ScreenBound{value: 0; movecamera: 1, 1}
	AssertSpecial{flag: noturntarget}
}

# the character cannot be hit until he has fully entered the stage
if BackEdgeBodyDist <= 0 {
	NotHitBy{value: SCA; time: 2}
}

if Time = 0 {
	if Facing != playerID(GetPlayerID(TeamLeader)),Facing {
		Turn{}
	}
	# set starting pos (redirected to gather consistent local coordinate space values ready for Const240p conversion)
	TeamMapSet{map: "_iksys_tagPosX"; value: Pos X * LocalScale - (BackEdgeBodyDist * LocalScale + 90) * Facing; redirectid: playerID(GetPlayerID(TeamLeader)),ID}
	PosSet{x: Const240p(Map(_iksys_tagPosX)); y: 0}
	# change active player assignment if the battle still goes on
	if RoundState = 2 {
		MapSet{map: "_iksys_tagLastID"; value: playerID(GetPlayerID(TeamLeader)),ID}
		TagIn{leader: PlayerNo}
		call fTagSwitchExplod();
	}
}

# regain control right after entering screen, in case of active player loss
if !Ctrl && BackEdgeBodyDist >= 0 && Map(_iksys_tagRegainCtrl) = 1 {
	CtrlSet{value: 1}
	MapSet{map: "_iksys_tagRegainCtrl"; value: 0}
}

if AnimElemTime(2) = 0 && Map(_iksys_tagJumpingInState) = 0 {
	VelSet{x: Const240p(4); y: -Const240p(8.75)}
	MapSet{map: "_iksys_tagJumpingInState"; value: 1}
} else if AnimElemTime(2) > 0 {
	Gravity{}
	if Vel Y >= 0 && Pos Y > 0 {
		VelSet{x: 0; y: 0}
		MapSet{map: "_iksys_tagJumpingInState"; value: 0}
		ChangeState{value: Const(StateTagLanding)}
	}
}

#===============================================================================
#StateTagLanding
#===============================================================================
[Statedef 5621; type: S; movetype: I; physics: N;
 anim: Const(AnimTagLanding); sprpriority: 2; ctrl: 0;]

if Time = 0 {
	PosSet{y: 0}
}

if AnimTime >= 0 {
	ChangeState{value: Const(StateStand); ctrl: 1}
}

#===============================================================================
#Global states (executed when in self's state)
#===============================================================================
[Statedef -3]

if !Const(Default.Enable.Tag) || IsHelper || TeamSide = 0 {
	#do nothing, global code disabled locally or executed by helper/stage
} else if RoundState = 0 && TeamMode = Tag {
	MapSet{map: "_iksys_tagActive"; value: 1}
	MapSet{map: "_iksys_tagJumpingInState"; value: 0}
	MapSet{map: "_iksys_tagLastID"; value: 0}
	if PlayerNo = TeamLeader {
		MapSet{map: "_iksys_tagIntroFlag"; value: 1}
	} else {
		MapSet{map: "_iksys_tagIntroFlag"; value: 0}
	}
} else if Map(_iksys_tagActive) = 1 {
	if RoundState = 4 {
		MapSet{map: "_iksys_tagActive"; value: 0}
	# alive players
	} else if Alive {
		let beingHit = 0;
		ignorehitpause if MoveType = H || GetHitVar(isbound) != 0 || StateNo = Const(StateDownedGetHit_gettingUp) ||
			StateNo = [Const(StateAirGetHit_fallRecoveryOnGroundStillFalling), Const(StateAirGetHit_fallRecoveryInAir)] {
			let beingHit = 1;
		}
		# active player
		if PlayerNo = TeamLeader {
			# having control, on the ground, not being hit
			if Ctrl && (StateNo = Const(StateStand) || (Pos Y >= 0 && $beingHit = 0)) {
				# last active player has left the screen or died
				if Map(_iksys_tagLastID) = 0 || playerID(Map(_iksys_tagLastID)),StateNo = Const(StateTagWaitingOutside) || playerID(Map(_iksys_tagLastID)),Alive = 0 {
					let partnerID = 0;
					let nextPartnerID = call fTagGetPartnerID(1);
					let previousPartnerID = call fTagGetPartnerID(-1);
					if AILevel > 0 {
						let partnerID = call fTagAISwitch($nextPartnerID, $previousPartnerID);
					} else if Command = "TagShiftFwd" {
						let partnerID = $nextPartnerID;
					} else if Command = "TagShiftBack" {
						let partnerID = $previousPartnerID;
					}
					if $partnerID > 0 && playerID($partnerID),StateNo = Const(StateTagWaitingOutside) {
						LifebarAction{spr: Const(MsgPartnerChange), 0}
						TagIn{stateno: Const(StateTagEnteringScreen); redirectid: $partnerID}
					}
				}
			}
		# partners (not hit)
		} else if $beingHit = 0 {
			# on screen, at the round start / during round
			if RoundState = 2 && (Ctrl || Standby || Map(_iksys_tagIntroFlag) = 0) && (StateNo = Const(StateStand) ||
				(Pos Y >= 0 && StateNo != [Const(StateTagEnteringScreen), Const(StateTagWaitingOutside)])) {
				MapSet{map: "_iksys_tagIntroFlag"; value: 1}
				MapSet{map: "_iksys_tagLeavingPosX"; value: Pos X + 0.0001}
				TagOut{stateno: Const(StateTagLeavingScreen)}
			# tagged out, at the round end
			} else if RoundState = 3 {
				AssertSpecial{flag: noinput}
				if StateNo = Const(StateTagWaitingOutside) {
					TagIn{stateno: Const(StateTagJumpingIn)}
				}
			}
		}
	# active player died and hit the ground
	} else if PlayerNo = TeamLeader && StateNo = [Const(StateDownedGetHit_hitGroundFromFall), Const(StateDownedGetHit_lyingDefeated)] {
		MapSet{map: "_iksys_tagActive"; value: 0}
		let partnerID = call fTagGetPartnerID(1);
		if $partnerID > 0 {
			LifebarAction{spr: Const(MsgPartnerChange), 0}
			MapSet{map: "_iksys_tagRegainCtrl"; value: 1; redirectid: $partnerID}
			TagIn{stateno: Const(StateTagJumpingIn); redirectid: $partnerID}
		}
	}
	# Red Life regeneration
	if Standby && RedLife > 0 && (Time % Const(TagRedLifeRegenFrames)) = 0 { #every 30 frames (0.5s) by default
		let regenVal = min(RedLife, ceil(LifeMax * Const(TagRedLifeRegenPercent))); #0.5% LifeMax by default
		LifeAdd{value: $regenVal; absolute: 1}
		RedLifeAdd{value: -$regenVal; absolute: 1}
	}
}
