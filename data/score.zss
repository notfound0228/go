#===============================================================================
#Global states (not halted by Pause/SuperPause, no helper limitations)
#===============================================================================
[Statedef -4]

if !Const(Default.Enable.Score) || TeamSide = 0 {
	#do nothing, global code disabled locally or executed by stage
} else if RoundState = 0 {
	MapSet{map: "_iksys_scoreVitalBase"; value: 0}
	MapSet{map: "_iksys_scoreConsecutiveWinsFlag"; value: 0}
	MapSet{map: "_iksys_scoreReceivedDamage"; value: 0}
	MapSet{map: "_iksys_scoreDamageBonus"; value: 0}
	MapSet{map: "_iksys_scoreDamageFrames"; value: 0}
	MapSet{map: "_iksys_scoreDamageID"; value: 0}
	MapSet{map: "_iksys_scoreComboCount"; value: 0}
	MapSet{map: "_iksys_scoreFirstAttackFlag"; value: 0}
	MapSet{map: "_iksys_scoreMoveCounteredFlag"; value: 0}
	MapSet{map: "_iksys_scoreWinFlag"; value: 0}
} else if RoundState = 4 && !IsHelper {
	# score: time vital bonus
	if Win && Map(_iksys_scoreVitalBase) = 0 && Alive {
		MapSet{map: "_iksys_scoreVitalBase"; value: float(Life) / LifeMax / (NumPartner + 1) * 10000}
		if TeamMode = Turns && RoundsExisted = 0 && enemy,RoundsExisted > 0 {
			# skip time ratio multiplier, adjust vital bonus depending on how many rounds it took turns team to beat the enemy
			ScoreAdd{value: round(Map(_iksys_scoreVitalBase) / (enemy,RoundsExisted + 1), -2)}
		} else {
			let timeRatio = 100 * TimeRemaining / (TimeRemaining + TimeElapsed);
			let p1TagNum = 1;
			let p2TagNum = 1;
			if TeamMode = Tag {
				let p1TagNum = NumPartner + 1;
			}
			if enemy,TeamMode = Tag {
				let p2TagNum = enemy,NumPartner + 1;
			}
			if $p1TagNum > $p2TagNum {
				# time ratio penalty in case of Tag adjusted FramesPerCount value and not equal team sizes
				let timeRatio = $timeRatio * $p2TagNum / $p1TagNum;
			}
			if $timeRatio > 90 {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 5, -2)}
			} else if $timeRatio > 85 {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 4, -2)}
			} else if $timeRatio > 80 {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 2.5, -2)}
			} else if $timeRatio > 70 {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 2, -2)}
			} else if $timeRatio > 60 {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 1.5, -2)}
			} else {
				ScoreAdd{value: round(Map(_iksys_scoreVitalBase) * 1, -2)}
			}
		}
	}
	# score: consecutive wins bonus
	if PlayerNo = TeamSide {
		if Win && MatchOver && ConsecutiveWins > 0 && Map(_iksys_scoreConsecutiveWinsFlag) = 0 && !IsHomeTeam && enemy,AILevel > 0 && GameMode != "scorechallenge" {
			ScoreAdd{value: 30000 + (ConsecutiveWins - 1) * 10000}
			MapSet{map: "_iksys_scoreConsecutiveWinsFlag"; value: 1}
		}
	}
} else ignorehitpause if RoundState > 0 {
	# score: damage bonus
	if ReceivedDamage != Map(_iksys_scoreReceivedDamage) {
		if ReceivedDamage > 0 && GetHitVar(score) = 0 && GetHitVar(playerno) != 0 && playerID(GetHitVar(id)),TeamSide != TeamSide {
			# normal attacks
			if GetHitVar(attr) = [Const(AttrStandingHyperAttack), Const(AttrAerialHyperAttack)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 10}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingSuperAttack), Const(AttrAerialSuperAttack)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 9}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingNormalAttack), Const(AttrAerialNormalAttack)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 8}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			# throws
			} else if GetHitVar(attr) = [Const(AttrStandingHyperThrow), Const(AttrAerialHyperThrow)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 10}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingSuperThrow), Const(AttrAerialSuperThrow)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 9}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingNormalThrow), Const(AttrAerialNormalThrow)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 8}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			# projectiles
			} else if GetHitVar(attr) = [Const(AttrStandingHyperProjectile), Const(AttrAerialHyperProjectile)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 10}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingSuperProjectile), Const(AttrAerialSuperProjectile)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 9}
				#MapSet{map: "_iksys_scoreDamageFrames"; value: min(20, GetHitVar(hittime))}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			} else if GetHitVar(attr) = [Const(AttrStandingNormalProjectile), Const(AttrAerialNormalProjectile)] {
				MapAdd{map: "_iksys_scoreDamageBonus"; value: (ReceivedDamage - Map(_iksys_scoreReceivedDamage)) * 8}
				MapSet{map: "_iksys_scoreDamageFrames"; value: 1}
			}
			MapSet{map: "_iksys_scoreDamageID"; value: GetHitVar(id)}
		}
		MapSet{map: "_iksys_scoreReceivedDamage"; value: ReceivedDamage}
	}
	if Map(_iksys_scoreDamageFrames) > 0 {
		ScoreAdd{value: round(Map(_iksys_scoreDamageBonus) / Map(_iksys_scoreDamageFrames), -2); redirectid: Map(_iksys_scoreDamageID)}
		MapAdd{map: "_iksys_scoreDamageBonus"; value: 0 - Map(_iksys_scoreDamageBonus) / Map(_iksys_scoreDamageFrames)}
		MapAdd{map: "_iksys_scoreDamageFrames"; value: -1}
	}
	# score: first attack bonus
	if FirstAttack && Map(_iksys_scoreFirstAttackFlag) = 0 {
		ScoreAdd{value: 1500}
		MapSet{map: "_iksys_scoreFirstAttackFlag"; value: 1}
	}
	# score: counter bonus
	if MoveCountered = 1 && Map(_iksys_scoreMoveCounteredFlag) = 0 {
		ScoreAdd{value: 100}
		MapSet{map: "_iksys_scoreMoveCounteredFlag"; value: 1}
	} else if MoveCountered = 0 && Map(_iksys_scoreMoveCounteredFlag) = 1 {
		MapSet{map: "_iksys_scoreMoveCounteredFlag"; value: 0}
	}
	# code executed only by P1 and P2
	if PlayerNo = TeamSide && !IsHelper {
		# score: combo bonus
		if ComboCount != Map(_iksys_scoreComboCount) {
			if ComboCount = 0 && Map(_iksys_scoreComboCount) >= 2 {
				if Map(_iksys_scoreComboCount) = 2 {
					ScoreAdd{value: 300}
				} else if Map(_iksys_scoreComboCount) = 3 {
					ScoreAdd{value: 500}
				} else if Map(_iksys_scoreComboCount) = 4 {
					ScoreAdd{value: 1000}
				} else if Map(_iksys_scoreComboCount) = 5 {
					ScoreAdd{value: 1200}
				} else if Map(_iksys_scoreComboCount) = 6 {
					ScoreAdd{value: 1500}
				} else if Map(_iksys_scoreComboCount) = 7 {
					ScoreAdd{value: 2000}
				} else if Map(_iksys_scoreComboCount) = 8 {
					ScoreAdd{value: 2300}
				} else if Map(_iksys_scoreComboCount) = 9 {
					ScoreAdd{value: 2600}
				} else if Map(_iksys_scoreComboCount) = 10 {
					ScoreAdd{value: 3000}
				} else if Map(_iksys_scoreComboCount) = 11 {
					ScoreAdd{value: 3300}
				} else if Map(_iksys_scoreComboCount) = 12 {
					ScoreAdd{value: 3600}
				} else if Map(_iksys_scoreComboCount) = 13 {
					ScoreAdd{value: 4000}
				} else if Map(_iksys_scoreComboCount) = 14 {
					ScoreAdd{value: 4500}
				} else {
					ScoreAdd{value: min(10000, 5000 + (Map(_iksys_scoreComboCount) - 15) * 1000)}
				}
			}
			MapSet{map: "_iksys_scoreComboCount"; value: ComboCount}
		}
		# score: win type bonus
		if Win && Map(_iksys_scoreWinFlag) = 0 {
			if WinPerfect {
				ScoreAdd{value: 15000}
			}
			if WinHyper {
				ScoreAdd{value: 10000}
			} else if WinSpecial {
				ScoreAdd{value: 3000}
			}
			MapSet{map: "_iksys_scoreWinFlag"; value: 1}
		}
	}
}
